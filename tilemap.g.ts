// Auto-generated code. Do not edit.
namespace myTiles {
    //% fixedInstance jres blockIdentity=images._tile
    export const transparency16 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile1 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile2 = image.ofBuffer(hex``);

    helpers._registerFactory("tilemap", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "level1":
            case "level1":return tiles.createTilemap(hex``, img`
. . . . . 2 . . . . . . . . . . 
. . . . . 2 . . . . . 2 . . . . 
. . . 2 . 2 . . . . . 2 . . . . 
. 2 2 2 . 2 . . . . . 2 . . . . 
. . . . . 2 . . 2 . . 2 2 . . . 
. . . . . 2 . . . . . . . . . . 
. . . . . . . . . . . 2 2 2 2 . 
. . . . . . . . . . . . . . . . 
. . . 2 . . . . . . . 2 . . . . 
. . . . . . . 2 2 2 2 2 . . . . 
. . 2 . . . . . . . . . . . . . 
. . 2 . . . . . . . . . . . . . 
. . 2 . . 2 2 2 . . . . . . . . 
. . 2 . . . . 2 2 2 2 2 2 2 . . 
. . 2 . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, [myTiles.transparency16,sprites.dungeon.floorLightMoss,sprites.dungeon.floorDark2,sprites.dungeon.stairSouth], TileScale.Sixteen);
            case "level":
            case "level4":return tiles.createTilemap(hex``, img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, [myTiles.transparency16,sprites.dungeon.darkGroundCenter], TileScale.Sixteen);
            case "level2":
            case "level2":return tiles.createTilemap(hex`10001000020808080808080808080808080808030609090909090909090909090909090706090909090909090a0a0a0a0a0a09070609090a0909090909090909090909070609090a0909090909090909090909070609090a0a0a0a0909090909090909070609090a0909090909090909090a0a070609090a0909090909090a0909090a07060909090909090909090a0909090907060909090909090909090a090909090706090909090909090909090909090907060a090909090909090909090909090b060a0909090a0a0a0a0a0a0909090907060a0909090909090909090a0a0a0907060a090909090909090909090909090701050505050505050505050505050504`, img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . 2 2 2 2 2 2 . . 
. . . 2 . . . . . . . . . . . . 
. . . 2 . . . . . . . . . . . . 
. . . 2 2 2 2 . . . . . . . . . 
. . . 2 . . . . . . . . . 2 2 . 
. . . 2 . . . . . . 2 . . . 2 . 
. . . . . . . . . . 2 . . . . . 
. . . . . . . . . . 2 . . . . . 
. . . . . . . . . . . . . . . . 
. 2 . . . . . . . . . . . . . . 
. 2 . . . 2 2 2 2 2 2 . . . . . 
. 2 . . . . . . . . . 2 2 2 . . 
. 2 . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, [myTiles.transparency16,sprites.castle.tilePath7,sprites.castle.tilePath1,sprites.castle.tilePath3,sprites.castle.tilePath9,sprites.castle.tilePath8,sprites.castle.tilePath4,sprites.castle.tilePath6,sprites.castle.tilePath2,sprites.castle.tilePath5,sprites.castle.tileGrass2,sprites.dungeon.stairEast], TileScale.Sixteen);
            case "level0":
            case "level3":return tiles.createTilemap(hex``, img`
. . 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
. . 2 . . 2 . . . 2 . . 2 . . 2 
. . . . . 2 . . . 2 . . . . . 2 
2 . . . . . . . . . . . . . . 2 
2 . . . . . . . . . . . . . . 2 
2 . . . . . 2 2 2 2 . . . . . 2 
2 . . . . . . . . . . . . . . 2 
2 . . 2 2 . . . 2 . . . 2 2 2 2 
2 . . 2 . . . . 2 . . . 2 . . 2 
2 . . . . . . . . . . . . . . 2 
2 . . . . . . . . . . . . . . 2 
2 . 2 2 2 . . . . 2 . . . . . 2 
2 . . 2 . . . . . 2 . . . . . 2 
2 . . . . . . . . 2 . . . . . 2 
2 . . . . . . . . 2 . . . . . 2 
2 2 . 2 2 2 2 2 2 2 2 2 2 2 2 2 
`, [myTiles.transparency16,sprites.dungeon.floorLight2,sprites.dungeon.stairLadder,sprites.dungeon.floorDarkDiamond,sprites.dungeon.chestClosed,sprites.dungeon.collectibleBlueCrystal,sprites.dungeon.stairWest], TileScale.Sixteen);
        }
        return null;
    })

    helpers._registerFactory("tile", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "transparency16":return transparency16;
            case "myTile":
            case "tile1":return tile1;
            case "myTile0":
            case "tile2":return tile2;
        }
        return null;
    })

}
// Auto-generated code. Do not edit.
